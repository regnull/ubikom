syntax = "proto3";
package Ubikom;
option go_package=".;pb";

enum ResultCode {
    RC_OK = 0;
    RC_INVALID_REQUEST = 1;
    RC_INVALID_KEY = 2;
    RC_RECORD_EXISTS = 3;
    RC_RECORD_NOT_FOUND = 4;
    RC_INSUFFICIENT_POW = 5;
    RC_INTERNAL_ERROR = 100;
}

enum Protocol {
    PL_UNKNOWN = 0;
    PL_DMS = 1;
}

message ContentWithPOW {
    bytes content = 1;
    bytes pow = 2; 
}

message Signature {
    bytes r = 1;
    bytes s = 2;
}

message Signed {
    bytes content = 1;
    Signature signature = 2;
    bytes key = 3;
}

message SignedWithPow {
    bytes content = 1;
    Signature signature = 2;
    bytes key = 3;  // Public key used to sign the request.
    bytes pow = 4;
}

message Result {
    ResultCode result = 1;
    string message = 2;
}

message KeyRegistrationRequest {
    bytes key = 1;
}

message NameRegistrationRequest {
    string name = 1;
}

message AddressRegistrationRequest {
    string name = 1;
    Protocol protocol = 2;
    string address = 3;
}

enum KeyRelationship {
    KR_NONE = 0;
    KR_PARENT = 1;
}

message KeyRelationshipRegistrationRequest {
    bytes target_key = 1;
    KeyRelationship relationship = 2;
}

service IdentityService {
    // Register public key. Each public key can be registered only once.
    // The key must be registered before it's associated with the name.
    // Content is public key.
    rpc RegisterKey(SignedWithPow) returns (Result);

    rpc RegisterKeyRelationship(SignedWithPow) returns (Result);

    // Links name and the public key.
    // Content is NameRegistrationRequest.
    rpc RegisterName(SignedWithPow) returns (Result);

    // Associate name and protocol with an address.
    // Content is AddressRegistrationRequest.
    rpc RegisterAddress(SignedWithPow) returns (Result);
}

message LookupNameRequest {
    string name = 1;
}

message LookupNameResponse {
    ResultCode result = 1;
    string message = 2;
    bytes key = 3;
}

message LookupAddressRequest {
    string name = 1;
    Protocol protocol = 2;
}

message LookupAddressResponse {
    ResultCode result = 1;
    string message = 2;
    string address = 3;
}

service LookupService {
    rpc LookupName(LookupNameRequest) returns (LookupNameResponse);
    rpc LookupAddress(LookupAddressRequest) returns (LookupAddressResponse);
}

message DMSMessage {
    // Sender's address.
    string sender = 1;

    // Receiver's address.
    string receiver = 2;

    bytes content = 3;

    Signature signature = 4;
}

message ResultWithContent {
    Result result = 1;
    bytes content = 2;
}

service DMSDumpService {
    rpc Send(DMSMessage) returns (Result);
    rpc Receive(Signed) returns (ResultWithContent);
}