// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	easyecc "github.com/regnull/easyecc/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockBlockchain is an autogenerated mock type for the Blockchain type
type MockBlockchain struct {
	mock.Mock
}	

type MockBlockchain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockchain) EXPECT() *MockBlockchain_Expecter {
	return &MockBlockchain_Expecter{mock: &_m.Mock}
}

// Endpoint provides a mock function with given fields: ctx, name
func (_m *MockBlockchain) Endpoint(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockchain_Endpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Endpoint'
type MockBlockchain_Endpoint_Call struct {
	*mock.Call
}

// Endpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBlockchain_Expecter) Endpoint(ctx interface{}, name interface{}) *MockBlockchain_Endpoint_Call {
	return &MockBlockchain_Endpoint_Call{Call: _e.mock.On("Endpoint", ctx, name)}
}

func (_c *MockBlockchain_Endpoint_Call) Run(run func(ctx context.Context, name string)) *MockBlockchain_Endpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlockchain_Endpoint_Call) Return(_a0 string, _a1 error) *MockBlockchain_Endpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockchain_Endpoint_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockBlockchain_Endpoint_Call {
	_c.Call.Return(run)
	return _c
}

// PublicKey provides a mock function with given fields: ctx, name
func (_m *MockBlockchain) PublicKey(ctx context.Context, name string) (*easyecc.PublicKey, error) {
	ret := _m.Called(ctx, name)

	var r0 *easyecc.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*easyecc.PublicKey, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *easyecc.PublicKey); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*easyecc.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockchain_PublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKey'
type MockBlockchain_PublicKey_Call struct {
	*mock.Call
}

// PublicKey is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBlockchain_Expecter) PublicKey(ctx interface{}, name interface{}) *MockBlockchain_PublicKey_Call {
	return &MockBlockchain_PublicKey_Call{Call: _e.mock.On("PublicKey", ctx, name)}
}

func (_c *MockBlockchain_PublicKey_Call) Run(run func(ctx context.Context, name string)) *MockBlockchain_PublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlockchain_PublicKey_Call) Return(_a0 *easyecc.PublicKey, _a1 error) *MockBlockchain_PublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockchain_PublicKey_Call) RunAndReturn(run func(context.Context, string) (*easyecc.PublicKey, error)) *MockBlockchain_PublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// PublicKeyByCurve provides a mock function with given fields: ctx, name, curve
func (_m *MockBlockchain) PublicKeyByCurve(ctx context.Context, name string, curve easyecc.EllipticCurve) (*easyecc.PublicKey, error) {
	ret := _m.Called(ctx, name, curve)

	var r0 *easyecc.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, easyecc.EllipticCurve) (*easyecc.PublicKey, error)); ok {
		return rf(ctx, name, curve)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, easyecc.EllipticCurve) *easyecc.PublicKey); ok {
		r0 = rf(ctx, name, curve)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*easyecc.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, easyecc.EllipticCurve) error); ok {
		r1 = rf(ctx, name, curve)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockchain_PublicKeyByCurve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKeyByCurve'
type MockBlockchain_PublicKeyByCurve_Call struct {
	*mock.Call
}

// PublicKeyByCurve is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - curve easyecc.EllipticCurve
func (_e *MockBlockchain_Expecter) PublicKeyByCurve(ctx interface{}, name interface{}, curve interface{}) *MockBlockchain_PublicKeyByCurve_Call {
	return &MockBlockchain_PublicKeyByCurve_Call{Call: _e.mock.On("PublicKeyByCurve", ctx, name, curve)}
}

func (_c *MockBlockchain_PublicKeyByCurve_Call) Run(run func(ctx context.Context, name string, curve easyecc.EllipticCurve)) *MockBlockchain_PublicKeyByCurve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(easyecc.EllipticCurve))
	})
	return _c
}

func (_c *MockBlockchain_PublicKeyByCurve_Call) Return(_a0 *easyecc.PublicKey, _a1 error) *MockBlockchain_PublicKeyByCurve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockchain_PublicKeyByCurve_Call) RunAndReturn(run func(context.Context, string, easyecc.EllipticCurve) (*easyecc.PublicKey, error)) *MockBlockchain_PublicKeyByCurve_Call {
	_c.Call.Return(run)
	return _c
}

// PublicKeyP256 provides a mock function with given fields: ctx, name
func (_m *MockBlockchain) PublicKeyP256(ctx context.Context, name string) (*easyecc.PublicKey, error) {
	ret := _m.Called(ctx, name)

	var r0 *easyecc.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*easyecc.PublicKey, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *easyecc.PublicKey); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*easyecc.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockchain_PublicKeyP256_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKeyP256'
type MockBlockchain_PublicKeyP256_Call struct {
	*mock.Call
}

// PublicKeyP256 is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBlockchain_Expecter) PublicKeyP256(ctx interface{}, name interface{}) *MockBlockchain_PublicKeyP256_Call {
	return &MockBlockchain_PublicKeyP256_Call{Call: _e.mock.On("PublicKeyP256", ctx, name)}
}

func (_c *MockBlockchain_PublicKeyP256_Call) Run(run func(ctx context.Context, name string)) *MockBlockchain_PublicKeyP256_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlockchain_PublicKeyP256_Call) Return(_a0 *easyecc.PublicKey, _a1 error) *MockBlockchain_PublicKeyP256_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockchain_PublicKeyP256_Call) RunAndReturn(run func(context.Context, string) (*easyecc.PublicKey, error)) *MockBlockchain_PublicKeyP256_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockchain creates a new instance of MockBlockchain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockchain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockchain {
	mock := &MockBlockchain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
