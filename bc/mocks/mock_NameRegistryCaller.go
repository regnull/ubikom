// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// MockNameRegistryCaller is an autogenerated mock type for the NameRegistryCaller type
type MockNameRegistryCaller struct {
	mock.Mock
}

type MockNameRegistryCaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNameRegistryCaller) EXPECT() *MockNameRegistryCaller_Expecter {
	return &MockNameRegistryCaller_Expecter{mock: &_m.Mock}
}

// LookupConfig provides a mock function with given fields: opts, name, configName
func (_m *MockNameRegistryCaller) LookupConfig(opts *bind.CallOpts, name string, configName string) (string, error) {
	ret := _m.Called(opts, name, configName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string, string) (string, error)); ok {
		return rf(opts, name, configName)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string, string) string); ok {
		r0 = rf(opts, name, configName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string, string) error); ok {
		r1 = rf(opts, name, configName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNameRegistryCaller_LookupConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupConfig'
type MockNameRegistryCaller_LookupConfig_Call struct {
	*mock.Call
}

// LookupConfig is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - name string
//   - configName string
func (_e *MockNameRegistryCaller_Expecter) LookupConfig(opts interface{}, name interface{}, configName interface{}) *MockNameRegistryCaller_LookupConfig_Call {
	return &MockNameRegistryCaller_LookupConfig_Call{Call: _e.mock.On("LookupConfig", opts, name, configName)}
}

func (_c *MockNameRegistryCaller_LookupConfig_Call) Run(run func(opts *bind.CallOpts, name string, configName string)) *MockNameRegistryCaller_LookupConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNameRegistryCaller_LookupConfig_Call) Return(_a0 string, _a1 error) *MockNameRegistryCaller_LookupConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNameRegistryCaller_LookupConfig_Call) RunAndReturn(run func(*bind.CallOpts, string, string) (string, error)) *MockNameRegistryCaller_LookupConfig_Call {
	_c.Call.Return(run)
	return _c
}

// LookupName provides a mock function with given fields: opts, name
func (_m *MockNameRegistryCaller) LookupName(opts *bind.CallOpts, name string) (struct {
	Owner     common.Address
	PublicKey []byte
	Price     *big.Int
}, error) {
	ret := _m.Called(opts, name)

	var r0 struct {
		Owner     common.Address
		PublicKey []byte
		Price     *big.Int
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (struct {
		Owner     common.Address
		PublicKey []byte
		Price     *big.Int
	}, error)); ok {
		return rf(opts, name)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) struct {
		Owner     common.Address
		PublicKey []byte
		Price     *big.Int
	}); ok {
		r0 = rf(opts, name)
	} else {
		r0 = ret.Get(0).(struct {
			Owner     common.Address
			PublicKey []byte
			Price     *big.Int
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNameRegistryCaller_LookupName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupName'
type MockNameRegistryCaller_LookupName_Call struct {
	*mock.Call
}

// LookupName is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - name string
func (_e *MockNameRegistryCaller_Expecter) LookupName(opts interface{}, name interface{}) *MockNameRegistryCaller_LookupName_Call {
	return &MockNameRegistryCaller_LookupName_Call{Call: _e.mock.On("LookupName", opts, name)}
}

func (_c *MockNameRegistryCaller_LookupName_Call) Run(run func(opts *bind.CallOpts, name string)) *MockNameRegistryCaller_LookupName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(string))
	})
	return _c
}

func (_c *MockNameRegistryCaller_LookupName_Call) Return(_a0 struct {
	Owner     common.Address
	PublicKey []byte
	Price     *big.Int
}, _a1 error) *MockNameRegistryCaller_LookupName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNameRegistryCaller_LookupName_Call) RunAndReturn(run func(*bind.CallOpts, string) (struct {
	Owner     common.Address
	PublicKey []byte
	Price     *big.Int
}, error)) *MockNameRegistryCaller_LookupName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNameRegistryCaller creates a new instance of MockNameRegistryCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNameRegistryCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNameRegistryCaller {
	mock := &MockNameRegistryCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
