// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityServiceClient interface {
	// Register public key. Each public key can be registered only once.
	// The key must be registered before it's associated with the name.
	// Content is public key.
	RegisterKey(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*KeyRegistrationResponse, error)
	// Register key relationship. The content is KeyRelationshipRegistrationRequest.
	RegisterKeyRelationship(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*KeyRelationshipRegistrationResponse, error)
	// Once a key is disabled, it is dead forever. This happens
	// if a key is compromised, or the owner has decided to kill
	// it for another reason. Use with caution.
	DisableKey(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*KeyDisableResponse, error)
	// Links name and the public key.
	// Content is NameRegistrationRequest.
	RegisterName(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*NameRegistrationResponse, error)
	// Associate name and protocol with an address.
	// Content is AddressRegistrationRequest.
	RegisterAddress(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*AddressRegistrationResponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) RegisterKey(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*KeyRegistrationResponse, error) {
	out := new(KeyRegistrationResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.IdentityService/RegisterKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RegisterKeyRelationship(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*KeyRelationshipRegistrationResponse, error) {
	out := new(KeyRelationshipRegistrationResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.IdentityService/RegisterKeyRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DisableKey(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*KeyDisableResponse, error) {
	out := new(KeyDisableResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.IdentityService/DisableKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RegisterName(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*NameRegistrationResponse, error) {
	out := new(NameRegistrationResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.IdentityService/RegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RegisterAddress(ctx context.Context, in *SignedWithPow, opts ...grpc.CallOption) (*AddressRegistrationResponse, error) {
	out := new(AddressRegistrationResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.IdentityService/RegisterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility
type IdentityServiceServer interface {
	// Register public key. Each public key can be registered only once.
	// The key must be registered before it's associated with the name.
	// Content is public key.
	RegisterKey(context.Context, *SignedWithPow) (*KeyRegistrationResponse, error)
	// Register key relationship. The content is KeyRelationshipRegistrationRequest.
	RegisterKeyRelationship(context.Context, *SignedWithPow) (*KeyRelationshipRegistrationResponse, error)
	// Once a key is disabled, it is dead forever. This happens
	// if a key is compromised, or the owner has decided to kill
	// it for another reason. Use with caution.
	DisableKey(context.Context, *SignedWithPow) (*KeyDisableResponse, error)
	// Links name and the public key.
	// Content is NameRegistrationRequest.
	RegisterName(context.Context, *SignedWithPow) (*NameRegistrationResponse, error)
	// Associate name and protocol with an address.
	// Content is AddressRegistrationRequest.
	RegisterAddress(context.Context, *SignedWithPow) (*AddressRegistrationResponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityServiceServer struct {
}

func (*UnimplementedIdentityServiceServer) RegisterKey(context.Context, *SignedWithPow) (*KeyRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKey not implemented")
}
func (*UnimplementedIdentityServiceServer) RegisterKeyRelationship(context.Context, *SignedWithPow) (*KeyRelationshipRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKeyRelationship not implemented")
}
func (*UnimplementedIdentityServiceServer) DisableKey(context.Context, *SignedWithPow) (*KeyDisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableKey not implemented")
}
func (*UnimplementedIdentityServiceServer) RegisterName(context.Context, *SignedWithPow) (*NameRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterName not implemented")
}
func (*UnimplementedIdentityServiceServer) RegisterAddress(context.Context, *SignedWithPow) (*AddressRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAddress not implemented")
}
func (*UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}

func RegisterIdentityServiceServer(s *grpc.Server, srv IdentityServiceServer) {
	s.RegisterService(&_IdentityService_serviceDesc, srv)
}

func _IdentityService_RegisterKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedWithPow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.IdentityService/RegisterKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterKey(ctx, req.(*SignedWithPow))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RegisterKeyRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedWithPow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterKeyRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.IdentityService/RegisterKeyRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterKeyRelationship(ctx, req.(*SignedWithPow))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DisableKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedWithPow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DisableKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.IdentityService/DisableKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DisableKey(ctx, req.(*SignedWithPow))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedWithPow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.IdentityService/RegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterName(ctx, req.(*SignedWithPow))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RegisterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedWithPow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.IdentityService/RegisterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterAddress(ctx, req.(*SignedWithPow))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ubikom.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterKey",
			Handler:    _IdentityService_RegisterKey_Handler,
		},
		{
			MethodName: "RegisterKeyRelationship",
			Handler:    _IdentityService_RegisterKeyRelationship_Handler,
		},
		{
			MethodName: "DisableKey",
			Handler:    _IdentityService_DisableKey_Handler,
		},
		{
			MethodName: "RegisterName",
			Handler:    _IdentityService_RegisterName_Handler,
		},
		{
			MethodName: "RegisterAddress",
			Handler:    _IdentityService_RegisterAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ubikom.proto",
}

// LookupServiceClient is the client API for LookupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LookupServiceClient interface {
	LookupKey(ctx context.Context, in *LookupKeyRequest, opts ...grpc.CallOption) (*LookupKeyResponse, error)
	LookupName(ctx context.Context, in *LookupNameRequest, opts ...grpc.CallOption) (*LookupNameResponse, error)
	LookupAddress(ctx context.Context, in *LookupAddressRequest, opts ...grpc.CallOption) (*LookupAddressResponse, error)
}

type lookupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLookupServiceClient(cc grpc.ClientConnInterface) LookupServiceClient {
	return &lookupServiceClient{cc}
}

func (c *lookupServiceClient) LookupKey(ctx context.Context, in *LookupKeyRequest, opts ...grpc.CallOption) (*LookupKeyResponse, error) {
	out := new(LookupKeyResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.LookupService/LookupKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) LookupName(ctx context.Context, in *LookupNameRequest, opts ...grpc.CallOption) (*LookupNameResponse, error) {
	out := new(LookupNameResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.LookupService/LookupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupServiceClient) LookupAddress(ctx context.Context, in *LookupAddressRequest, opts ...grpc.CallOption) (*LookupAddressResponse, error) {
	out := new(LookupAddressResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.LookupService/LookupAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookupServiceServer is the server API for LookupService service.
// All implementations must embed UnimplementedLookupServiceServer
// for forward compatibility
type LookupServiceServer interface {
	LookupKey(context.Context, *LookupKeyRequest) (*LookupKeyResponse, error)
	LookupName(context.Context, *LookupNameRequest) (*LookupNameResponse, error)
	LookupAddress(context.Context, *LookupAddressRequest) (*LookupAddressResponse, error)
	mustEmbedUnimplementedLookupServiceServer()
}

// UnimplementedLookupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLookupServiceServer struct {
}

func (*UnimplementedLookupServiceServer) LookupKey(context.Context, *LookupKeyRequest) (*LookupKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupKey not implemented")
}
func (*UnimplementedLookupServiceServer) LookupName(context.Context, *LookupNameRequest) (*LookupNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupName not implemented")
}
func (*UnimplementedLookupServiceServer) LookupAddress(context.Context, *LookupAddressRequest) (*LookupAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAddress not implemented")
}
func (*UnimplementedLookupServiceServer) mustEmbedUnimplementedLookupServiceServer() {}

func RegisterLookupServiceServer(s *grpc.Server, srv LookupServiceServer) {
	s.RegisterService(&_LookupService_serviceDesc, srv)
}

func _LookupService_LookupKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).LookupKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.LookupService/LookupKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).LookupKey(ctx, req.(*LookupKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_LookupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).LookupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.LookupService/LookupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).LookupName(ctx, req.(*LookupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupService_LookupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServiceServer).LookupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.LookupService/LookupAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServiceServer).LookupAddress(ctx, req.(*LookupAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LookupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ubikom.LookupService",
	HandlerType: (*LookupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupKey",
			Handler:    _LookupService_LookupKey_Handler,
		},
		{
			MethodName: "LookupName",
			Handler:    _LookupService_LookupName_Handler,
		},
		{
			MethodName: "LookupAddress",
			Handler:    _LookupService_LookupAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ubikom.proto",
}

// DMSDumpServiceClient is the client API for DMSDumpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DMSDumpServiceClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
}

type dMSDumpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDMSDumpServiceClient(cc grpc.ClientConnInterface) DMSDumpServiceClient {
	return &dMSDumpServiceClient{cc}
}

func (c *dMSDumpServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.DMSDumpService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMSDumpServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/Ubikom.DMSDumpService/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMSDumpServiceServer is the server API for DMSDumpService service.
// All implementations must embed UnimplementedDMSDumpServiceServer
// for forward compatibility
type DMSDumpServiceServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
	mustEmbedUnimplementedDMSDumpServiceServer()
}

// UnimplementedDMSDumpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDMSDumpServiceServer struct {
}

func (*UnimplementedDMSDumpServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedDMSDumpServiceServer) Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (*UnimplementedDMSDumpServiceServer) mustEmbedUnimplementedDMSDumpServiceServer() {}

func RegisterDMSDumpServiceServer(s *grpc.Server, srv DMSDumpServiceServer) {
	s.RegisterService(&_DMSDumpService_serviceDesc, srv)
}

func _DMSDumpService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMSDumpServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.DMSDumpService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMSDumpServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMSDumpService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMSDumpServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ubikom.DMSDumpService/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMSDumpServiceServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DMSDumpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ubikom.DMSDumpService",
	HandlerType: (*DMSDumpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _DMSDumpService_Send_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _DMSDumpService_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ubikom.proto",
}
