// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/regnull/ubikom/pb"
)

// IdentityServiceClient is an autogenerated mock type for the IdentityServiceClient type
type IdentityServiceClient struct {
	mock.Mock
}

// DisableKey provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) DisableKey(ctx context.Context, in *pb.SignedWithPow, opts ...grpc.CallOption) (*pb.KeyDisableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.KeyDisableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) *pb.KeyDisableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.KeyDisableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAddress provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) RegisterAddress(ctx context.Context, in *pb.SignedWithPow, opts ...grpc.CallOption) (*pb.AddressRegistrationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AddressRegistrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) *pb.AddressRegistrationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddressRegistrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterKey provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) RegisterKey(ctx context.Context, in *pb.SignedWithPow, opts ...grpc.CallOption) (*pb.KeyRegistrationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.KeyRegistrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) *pb.KeyRegistrationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.KeyRegistrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterKeyRelationship provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) RegisterKeyRelationship(ctx context.Context, in *pb.SignedWithPow, opts ...grpc.CallOption) (*pb.KeyRelationshipRegistrationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.KeyRelationshipRegistrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) *pb.KeyRelationshipRegistrationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.KeyRelationshipRegistrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterName provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) RegisterName(ctx context.Context, in *pb.SignedWithPow, opts ...grpc.CallOption) (*pb.NameRegistrationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.NameRegistrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) *pb.NameRegistrationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.NameRegistrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignedWithPow, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
