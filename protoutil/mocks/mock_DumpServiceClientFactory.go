// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/regnull/ubikom/pb"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockDumpServiceClientFactory is an autogenerated mock type for the DumpServiceClientFactory type
type MockDumpServiceClientFactory struct {
	mock.Mock
}

type MockDumpServiceClientFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDumpServiceClientFactory) EXPECT() *MockDumpServiceClientFactory_Expecter {
	return &MockDumpServiceClientFactory_Expecter{mock: &_m.Mock}
}

// CreateDumpServiceClient provides a mock function with given fields: ctx, url, timeout
func (_m *MockDumpServiceClientFactory) CreateDumpServiceClient(ctx context.Context, url string, timeout time.Duration) (pb.DMSDumpServiceClient, func(), error) {
	ret := _m.Called(ctx, url, timeout)

	var r0 pb.DMSDumpServiceClient
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (pb.DMSDumpServiceClient, func(), error)); ok {
		return rf(ctx, url, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) pb.DMSDumpServiceClient); ok {
		r0 = rf(ctx, url, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.DMSDumpServiceClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) func()); ok {
		r1 = rf(ctx, url, timeout)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Duration) error); ok {
		r2 = rf(ctx, url, timeout)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDumpServiceClientFactory_CreateDumpServiceClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDumpServiceClient'
type MockDumpServiceClientFactory_CreateDumpServiceClient_Call struct {
	*mock.Call
}

// CreateDumpServiceClient is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - timeout time.Duration
func (_e *MockDumpServiceClientFactory_Expecter) CreateDumpServiceClient(ctx interface{}, url interface{}, timeout interface{}) *MockDumpServiceClientFactory_CreateDumpServiceClient_Call {
	return &MockDumpServiceClientFactory_CreateDumpServiceClient_Call{Call: _e.mock.On("CreateDumpServiceClient", ctx, url, timeout)}
}

func (_c *MockDumpServiceClientFactory_CreateDumpServiceClient_Call) Run(run func(ctx context.Context, url string, timeout time.Duration)) *MockDumpServiceClientFactory_CreateDumpServiceClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockDumpServiceClientFactory_CreateDumpServiceClient_Call) Return(_a0 pb.DMSDumpServiceClient, _a1 func(), _a2 error) *MockDumpServiceClientFactory_CreateDumpServiceClient_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDumpServiceClientFactory_CreateDumpServiceClient_Call) RunAndReturn(run func(context.Context, string, time.Duration) (pb.DMSDumpServiceClient, func(), error)) *MockDumpServiceClientFactory_CreateDumpServiceClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDumpServiceClientFactory creates a new instance of MockDumpServiceClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDumpServiceClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDumpServiceClientFactory {
	mock := &MockDumpServiceClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
